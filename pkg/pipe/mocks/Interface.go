// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	exec "os/exec"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Run provides a mock function with given fields: ctx, arg
func (_m *Interface) Run(ctx context.Context, arg ...string) (*exec.Cmd, io.ReadCloser, error) {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *exec.Cmd
	var r1 io.ReadCloser
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) (*exec.Cmd, io.ReadCloser, error)); ok {
		return rf(ctx, arg...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *exec.Cmd); ok {
		r0 = rf(ctx, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exec.Cmd)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) io.ReadCloser); ok {
		r1 = rf(ctx, arg...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, ...string) error); ok {
		r2 = rf(ctx, arg...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
