// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/antonmisa/1cctl_cli/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Ctrl is an autogenerated mock type for the Ctrl type
type Ctrl struct {
	mock.Mock
}

// ClusterByName provides a mock function with given fields: ctx, clusterName
func (_m *Ctrl) ClusterByName(ctx context.Context, clusterName string) (entity.Cluster, error) {
	ret := _m.Called(ctx, clusterName)

	var r0 entity.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Cluster, error)); ok {
		return rf(ctx, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Cluster); ok {
		r0 = rf(ctx, clusterName)
	} else {
		r0 = ret.Get(0).(entity.Cluster)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connections provides a mock function with given fields: ctx, cluster, infobase, clusterCred
func (_m *Ctrl) Connections(ctx context.Context, cluster entity.Cluster, infobase entity.Infobase, clusterCred entity.Credentials) ([]entity.Connection, error) {
	ret := _m.Called(ctx, cluster, infobase, clusterCred)

	var r0 []entity.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, entity.Infobase, entity.Credentials) ([]entity.Connection, error)); ok {
		return rf(ctx, cluster, infobase, clusterCred)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, entity.Infobase, entity.Credentials) []entity.Connection); ok {
		r0 = rf(ctx, cluster, infobase, clusterCred)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Cluster, entity.Infobase, entity.Credentials) error); ok {
		r1 = rf(ctx, cluster, infobase, clusterCred)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnections provides a mock function with given fields: ctx, cluster, connections, clusterCred
func (_m *Ctrl) DeleteConnections(ctx context.Context, cluster entity.Cluster, connections []entity.Connection, clusterCred entity.Credentials) error {
	ret := _m.Called(ctx, cluster, connections, clusterCred)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, []entity.Connection, entity.Credentials) error); ok {
		r0 = rf(ctx, cluster, connections, clusterCred)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSessions provides a mock function with given fields: ctx, cluster, sessions, clusterCred
func (_m *Ctrl) DeleteSessions(ctx context.Context, cluster entity.Cluster, sessions []entity.Session, clusterCred entity.Credentials) error {
	ret := _m.Called(ctx, cluster, sessions, clusterCred)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, []entity.Session, entity.Credentials) error); ok {
		r0 = rf(ctx, cluster, sessions, clusterCred)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableSessions provides a mock function with given fields: ctx, cluster, infobase, clusterCred, infobaseCred, code
func (_m *Ctrl) DisableSessions(ctx context.Context, cluster entity.Cluster, infobase entity.Infobase, clusterCred entity.Credentials, infobaseCred entity.Credentials, code string) error {
	ret := _m.Called(ctx, cluster, infobase, clusterCred, infobaseCred, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, entity.Infobase, entity.Credentials, entity.Credentials, string) error); ok {
		r0 = rf(ctx, cluster, infobase, clusterCred, infobaseCred, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableSessions provides a mock function with given fields: ctx, cluster, infobase, clusterCred, infobaseCred, code
func (_m *Ctrl) EnableSessions(ctx context.Context, cluster entity.Cluster, infobase entity.Infobase, clusterCred entity.Credentials, infobaseCred entity.Credentials, code string) error {
	ret := _m.Called(ctx, cluster, infobase, clusterCred, infobaseCred, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, entity.Infobase, entity.Credentials, entity.Credentials, string) error); ok {
		r0 = rf(ctx, cluster, infobase, clusterCred, infobaseCred, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InfobaseByName provides a mock function with given fields: ctx, cluster, infobaseName, clusterCred
func (_m *Ctrl) InfobaseByName(ctx context.Context, cluster entity.Cluster, infobaseName string, clusterCred entity.Credentials) (entity.Infobase, error) {
	ret := _m.Called(ctx, cluster, infobaseName, clusterCred)

	var r0 entity.Infobase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, string, entity.Credentials) (entity.Infobase, error)); ok {
		return rf(ctx, cluster, infobaseName, clusterCred)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, string, entity.Credentials) entity.Infobase); ok {
		r0 = rf(ctx, cluster, infobaseName, clusterCred)
	} else {
		r0 = ret.Get(0).(entity.Infobase)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Cluster, string, entity.Credentials) error); ok {
		r1 = rf(ctx, cluster, infobaseName, clusterCred)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunBackup provides a mock function with given fields: ctx, cluster, infobase, infobaseCred, lockCode, outputPath
func (_m *Ctrl) RunBackup(ctx context.Context, cluster entity.Cluster, infobase entity.Infobase, infobaseCred entity.Credentials, lockCode string, outputPath string) error {
	ret := _m.Called(ctx, cluster, infobase, infobaseCred, lockCode, outputPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, entity.Infobase, entity.Credentials, string, string) error); ok {
		r0 = rf(ctx, cluster, infobase, infobaseCred, lockCode, outputPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sessions provides a mock function with given fields: ctx, cluster, infobase, clusterCred
func (_m *Ctrl) Sessions(ctx context.Context, cluster entity.Cluster, infobase entity.Infobase, clusterCred entity.Credentials) ([]entity.Session, error) {
	ret := _m.Called(ctx, cluster, infobase, clusterCred)

	var r0 []entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, entity.Infobase, entity.Credentials) ([]entity.Session, error)); ok {
		return rf(ctx, cluster, infobase, clusterCred)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, entity.Infobase, entity.Credentials) []entity.Session); ok {
		r0 = rf(ctx, cluster, infobase, clusterCred)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Cluster, entity.Infobase, entity.Credentials) error); ok {
		r1 = rf(ctx, cluster, infobase, clusterCred)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCtrl creates a new instance of Ctrl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCtrl(t interface {
	mock.TestingT
	Cleanup(func())
}) *Ctrl {
	mock := &Ctrl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
